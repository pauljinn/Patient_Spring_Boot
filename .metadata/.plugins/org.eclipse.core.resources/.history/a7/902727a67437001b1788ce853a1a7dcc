package com.cg.patient.service;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.assertj.core.util.Arrays;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.BDDMockito;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.cg.patient.domain.Patient;
import com.cg.patient.exception.PatientException;
import com.cg.patient.repository.PatientRepository;

class PatientServiceTest {

	@Mock
	PatientRepository patientRepository;
	
	@InjectMocks
	PatientService patientService;
	
	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}
	
	
	@Test
	void test1_findPatientByPatientIdentifier() {
		BDDMockito.given(patientRepository.findByPatientIdentifier("PA01")).willReturn(new Patient("abc",22,97401348L,"xyz"));
		Patient patient= patientService.findPatientByPatientIdentifier("PA01");
		assertNotNull(patient);
		assertEquals("abc", patient.getPatientName());
		assertNull(patient.getPatientIdentifier());
		assertEquals(22, patient.getPatientAge());
		assertEquals(97401348L,patient.getPhoneNumber());
		assertEquals("xyz",patient.getPatientAddress());
	}
	
	@Test
	void test2_findProjectByIdentifier_ThrowProjectNotFoundException() {
		BDDMockito.given(patientRepository.findByPatientIdentifier("PA02")).willThrow(new PatientException());
		assertThrows(PatientException.class, ()->patientService.findPatientByPatientIdentifier("PA02"));
		
	}
	
	@Test
	void test_findAll() {
		List<Patient> patientList = new ArrayList<>();
		patientList.add(new Patient("abc",22,29292L,"xyz"));
		BDDMockito.given(patientRepository.findAll()).willReturn(patientList);
		Iterable<Patient> patients = patientService.findAllPatients();
		assertNotNull(patients);
		assertEquals(1,((Collection<?>) patients).size());
		System.out.println(patients);
	}
	
	

}

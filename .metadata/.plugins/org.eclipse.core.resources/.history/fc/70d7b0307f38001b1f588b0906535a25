package com.cg.patient.service;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.assertj.core.util.Arrays;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.BDDMockito;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.cg.patient.domain.MedicalStore;
import com.cg.patient.domain.Patient;
import com.cg.patient.exception.PatientException;
import com.cg.patient.repository.PatientRepository;

class PatientServiceTest {

	@Mock
	PatientRepository patientRepository;
	
	@InjectMocks
	PatientService patientService;
	
	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}
	
	/**
	 * Testing the saveOrUpdate method of service class by giving correct inputs.
	 */
	@Test
	void test1_saveOrUpdate() {
		Patient patient = new Patient("Pa01","abc",22,97401348L,"xyz");
		BDDMockito.given(patientRepository.save(patient)).willReturn(patient);
		Patient patientGot = patientService.saveOrUpdate(patient);
		assertNotNull(patientGot);
		assertEquals("PA01",patientGot.getPatientIdentifier());
		assertEquals("abc", patientGot.getPatientName());
		assertEquals(22, patientGot.getPatientAge());
		assertEquals(97401348L,patientGot.getPhoneNumber());
		assertEquals("xyz",patientGot.getPatientAddress());
		
	}
	
	/**
	 * Testing the saveOrUpdate method of service layer on incorrect inputs.
	 */
	@Test
	void test2_saveOrUpdate_ThrowPatientException() {
		Patient patient = new Patient("Pa01","abc",22,97401348L,"xyz");
		BDDMockito.given(patientRepository.save(patient)).willThrow(new PatientException());
		assertThrows(PatientException.class, ()->patientService.saveOrUpdate(patient));
	}
	
	/**
	 * Testing the findPatientByPatientIdentifier method of the service layer on giving correct inputs.
	 */
	@Test
	void test1_findPatientByPatientIdentifier() {
		BDDMockito.given(patientRepository.findByPatientIdentifier("PA01")).willReturn(new Patient("abc",22,97401348L,"xyz"));
		Patient patient= patientService.findPatientByPatientIdentifier("PA01");
		assertNotNull(patient);
		assertEquals("abc", patient.getPatientName());
		assertNull(patient.getPatientIdentifier());
		assertEquals(22, patient.getPatientAge());
		assertEquals(97401348L,patient.getPhoneNumber());
		assertEquals("xyz",patient.getPatientAddress());
	}
	
	/**
	 * Testing the findProjectByProjectIdentifier method of the service layer when patientRepository findByPatientIdentifier throws patient exception.
	 */
	@Test
	void test2_findProjectByIdentifier_ThrowPatientException() {
		BDDMockito.given(patientRepository.findByPatientIdentifier("PA02")).willThrow(new PatientException());
		assertThrows(PatientException.class, ()->patientService.findPatientByPatientIdentifier("PA02"));
		
	}
	
	/**
	 * Testing the findALlPatients method of the service layer by assigning the correct return value to patientRepository  findAll method.
	 */
	@Test
	void test_findAllPatients() {
		List<Patient> patientList = new ArrayList<>();
		patientList.add(new Patient("abc",22,29292L,"xyz"));
		BDDMockito.given(patientRepository.findAll()).willReturn(patientList);
		Iterable<Patient> patients = patientService.findAllPatients();
		assertNotNull(patients);
		assertEquals(1,((Collection<?>) patients).size());
		patients.forEach((i)->{
			assertTrue(i instanceof Patient);
			Patient patient = (Patient) i;
			assertEquals("abc",patient.getPatientName());
			assertEquals(22,patient.getPatientAge());
			assertEquals(29292L,patient.getPhoneNumber());
			assertEquals("xyz",patient.getPatientAddress());
			});
	}
	
	/**
	 * Testing the deletePatientByPatientIdentifier method of the service layer if patient with given patient identifier exist in database.
	 */
	@Test
	void test1_deletePatientByPatientIdentifier() {
		BDDMockito.given(patientRepository.findByPatientIdentifier("PA01")).willReturn(new Patient("abc",22,97401348L,"xyz"));
		assertTrue(patientService.deletePatientByPatientIdentifier("Pa01"));
	}
	
	/**
	 * Testing the deletePatientByPatientIdentifier method of the service layer if patient with given patient identifier doesn't exist in database.
	 */
	@Test
	void test2_deletePatientByPatientIdentifier_ThrowPatientException() {
		BDDMockito.given(patientRepository.findByPatientIdentifier("PA01")).willReturn(null);
		assertThrows(PatientException.class, ()->patientService.deletePatientByPatientIdentifier("PA01"));
	}
	
	/**
	 * Testing the findByMedicine method of the service layer on both the case if a medicine exist in the medical store
	 * and if the medicine didn't exist the medical store.
	 */
	@Test
	void test_findByMedicine() {
		MedicalStore medicalStore = new MedicalStore("Avon", 98383L, "XYZ", new String[] {"dispirin","d-cold"} ,"Shubham");
		assertTrue(patientService.findByMedicine(medicalStore, "d-cold"));
		assertFalse(patientService.findByMedicine(medicalStore,"aspirin"));
	}
}
